{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","height","margin","Burger","ingredients","Button","btnType","clicked","onCheckoutCancelled","onCheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderHandler","event","preventDefault","inputElement","order","ings","price","userId","orderData","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formIsValid","setState","formElementsArray","key","this","push","id","config","onSubmit","map","element","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","orders","auth","dispatch","actionCreator","withErrorHandler","axios","Checkout","checkoutContinuedHandler","history","replace","checkoutCancelledHandler","goBack","summary","to","purchasedRedirect","purchased","path","match","url","render","input","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.e353c9c8.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst CheckoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope you enjoy your burger!</h1>\n      <div style={{ width: '100%', height: '300px', margin: 'auto' }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.onCheckoutCancelled}>\n        Cancel\n      </Button>\n      <Button btnType=\"Success\" clicked={props.onCheckoutContinued}>\n        Checkout\n      </Button>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actionCreator from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your name',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP Code',\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 4,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your email',\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            { value: 'fastest', displayValue: 'Fastest' },\n            { value: 'cheapest', displayValue: 'Cheapest' },\n          ],\n        },\n        value: 'fastest',\n        valid: true,\n      },\n    },\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const orderForm = {};\n    for (let inputElement in this.state.orderForm) {\n      orderForm[inputElement] = this.state.orderForm[inputElement].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      userId: this.props.userId,\n      orderData: orderForm,\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        touched: true,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n      }\n    );\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    let formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n\n    let orderForm = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((element) => (\n          <Input\n            key={element.id}\n            elementType={element.config.elementType}\n            elementConfig={element.config.elementConfig}\n            value={element.config.value}\n            invalid={!element.config.valid}\n            shouldValidate={element.config.validation}\n            touched={element.config.touched}\n            changed={(event) => this.inputChangedHandler(event, element.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          Order\n        </Button>\n      </form>\n    );\n\n    if (this.props.loading) {\n      orderForm = <Spinner />;\n    }\n\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {orderForm}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actionCreator.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  };\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/orders\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            onCheckoutCancelled={this.checkoutCancelledHandler}\n            onCheckoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.url + '/contact-data'}\n            render={() => (\n              <ContactData\n                ingredients={this.props.ings}\n                price={this.props.price}\n                {...this.props}\n              />\n            )}\n          />\n        </div>\n      );\n    }\n\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    purchased: state.orders.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = (\n        <input\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'textarea':\n      inputElement = (\n        <textarea\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case 'select':\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option value={option.value} key={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={classes.InputElement}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}